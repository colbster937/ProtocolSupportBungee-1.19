buildscript {
	repositories {
		mavenCentral()
		maven {
			url 'https://jitpack.io'
		}
	}
	dependencies {
		classpath group: 'com.github.HurricaneGamesOrg', name: 'ManualGradleDependencySupplier', version: '1e9e953fb4'
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version '5.0.0'
	id 'java'
}

apply plugin: 'org.hurricanegames.ManualGradleDependencySupplier'

defaultTasks 'build'

group = 'protocolsupport'
version = '1.19-1'

import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.Files

import org.hurricanegames.manualgradledependencysupplier.DependencySupplier
import org.hurricanegames.manualgradledependencysupplier.DownloadDependencySupplier
import org.hurricanegames.manualgradledependencysupplier.ManualGradleDependencySupplier

Path projectDirectoryPath = projectDir.toPath().toAbsolutePath()

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
		resources {
			srcDirs = ['resources']
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'it.unimi.dsi:fastutil:8.5.8'

	compileOnly ManualGradleDependencySupplier.supplyDependecies(
		projectDirectoryPath.resolve('libraries_runtime'),
		[
			new DownloadDependencySupplier(
				'bungeecord-1.19-1.jar',
				new URL('https://api.papermc.io/v2/projects/waterfall/versions/1.19/builds/500/downloads/waterfall-1.19-500.jar')
			)
		],
		true
	)
}

compileJava {
	doFirst {
		classpath -= configurations.compileOnly
		classpath += configurations.compileOnly
	}
	options.encoding = 'UTF-8'
	options.incremental = false
}

shadowJar {
	from sourceSets.main.java.srcDirs
	from 'LICENSE'

	archiveFileName = jar.archiveFileName.get()

	exclude 'META-INF/**'
	relocate 'org.apache', 'protocolsupport.libs.org.apache'
	relocate 'it.unimi.dsi.fastutil', 'protocolsupport.libs.it.unimi.dsi.fastutil'

	minimize()
}

task copyFinalJarToTarget(type: DefaultTask) {
	doLast {
		Path targetJarDirectory = projectDirectoryPath.resolve("target")
		Files.createDirectories(targetJarDirectory)
		Files.copy(
			shadowJar.archiveFile.get().asFile.toPath(),
			targetJarDirectory.resolve(shadowJar.archiveBaseName.get() + '.jar'),
			java.nio.file.StandardCopyOption.REPLACE_EXISTING
		)
	}
}

jar.enabled = false
jar.finalizedBy(shadowJar)
shadowJar.finalizedBy(copyFinalJarToTarget)
